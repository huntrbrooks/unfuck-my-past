import { NextResponse } from 'next/server'
import { auth } from '@clerk/nextjs/server'
import { db, users } from '../../../../db'
import { eq } from 'drizzle-orm'
import { AIOnboardingAnalyzer } from '../../../../lib/ai-onboarding-analyzer'
import { HSI_QUESTIONS } from '@/lib/hsi'

// Ensure Node.js runtime for DB driver compatibility and external fetches
export const runtime = 'nodejs'

// Global flag to prevent multiple simultaneous generations
let isGeneratingQuestions = false

export async function GET() {
  try {
    const { userId } = await auth()
    
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get user preferences from database using Drizzle ORM
    const userResult = await db.select().from(users).where(eq(users.id, userId)).limit(1)

    if (!userResult || userResult.length === 0) {
      return NextResponse.json({ error: 'User preferences not found. Please complete onboarding first.' }, { status: 404 })
    }

    const user = userResult[0]
    const safetyData = typeof user.safety === 'string' ? JSON.parse(user.safety) : user.safety

    console.log('User safety data:', JSON.stringify(safetyData, null, 2))

    // Check if personalized questions exist
    const personalizedQuestions = safetyData.personalizedQuestions
    const diagnosticAnalysis = safetyData.diagnosticAnalysis

    if (personalizedQuestions && diagnosticAnalysis && personalizedQuestions.length > 0) {
      console.log('Using existing personalized questions:', personalizedQuestions.length)
      // Use personalized questions
      return NextResponse.json({
        questions: personalizedQuestions,
        hsi: { questions: HSI_QUESTIONS },
        userPreferences: {
          tone: user.tone || 'gentle',
          voice: user.voice || 'friend',
          rawness: user.rawness || 'moderate',
          depth: user.depth || 'moderate',
          learning: user.learning || 'text',
          engagement: user.engagement || 'passive',
          goals: safetyData.goals || [],
          experience: safetyData.experience || 'beginner'
        },
        analysis: diagnosticAnalysis,
        isPersonalized: true
      })
    }

    // Check if questions are currently being generated
    if (safetyData.questionGenerationTimestamp) {
      const generationTime = new Date(safetyData.questionGenerationTimestamp)
      const now = new Date()
      const timeDiff = now.getTime() - generationTime.getTime()
      
      // If questions were generated in the last 5 minutes, return existing questions
      if (timeDiff < 300000) {
        console.log('Questions were recently generated, returning existing questions...')
        if (personalizedQuestions && personalizedQuestions.length > 0) {
          return NextResponse.json({
            questions: personalizedQuestions,
            hsi: { questions: HSI_QUESTIONS },
            userPreferences: {
              tone: user.tone || 'gentle',
              voice: user.voice || 'friend',
              rawness: user.rawness || 'moderate',
              depth: user.depth || 'moderate',
              learning: user.learning || 'text',
              engagement: user.engagement || 'passive',
              goals: safetyData.goals || [],
              experience: safetyData.experience || 'beginner'
            },
            analysis: diagnosticAnalysis,
            isPersonalized: true
          })
        }
      }
    }

    // If we have existing questions, return them instead of regenerating
    if (personalizedQuestions && personalizedQuestions.length > 0) {
      console.log('Using existing personalized questions:', personalizedQuestions.length)
      return NextResponse.json({
        questions: personalizedQuestions,
        hsi: { questions: HSI_QUESTIONS },
        userPreferences: {
          tone: user.tone || 'gentle',
          voice: user.voice || 'friend',
          rawness: user.rawness || 'moderate',
          depth: user.depth || 'moderate',
          learning: user.learning || 'text',
          engagement: user.engagement || 'passive',
          goals: safetyData.goals || [],
          experience: safetyData.experience || 'beginner'
        },
        analysis: diagnosticAnalysis,
        isPersonalized: true
      })
    }

    // Check if questions are currently being generated globally
    if (isGeneratingQuestions) {
      console.log('Questions are currently being generated by another request, returning existing questions...')
      if (personalizedQuestions && personalizedQuestions.length > 0) {
        return NextResponse.json({
          questions: personalizedQuestions,
          hsi: { questions: HSI_QUESTIONS },
          userPreferences: {
            tone: user.tone || 'gentle',
            voice: user.voice || 'friend',
            rawness: user.rawness || 'moderate',
            depth: user.depth || 'moderate',
            learning: user.learning || 'text',
            engagement: user.engagement || 'passive',
            goals: safetyData.goals || [],
            experience: safetyData.experience || 'beginner'
          },
          analysis: diagnosticAnalysis,
          isPersonalized: true
        })
      }
      // If no existing questions and generation is in progress, wait
      return NextResponse.json(
        { error: 'Questions are being generated, please try again in a moment' },
        { status: 429 }
      )
    }

    console.log('No personalized questions found, generating them now...')
    isGeneratingQuestions = true
    
    // Generate personalized questions using the new system
    try {
      // Build AI onboarding payload
      const onboardingData = {
        tone: user.tone || 'gentle',
        voice: user.voice || 'friend',
        rawness: user.rawness || 'moderate',
        depth: user.depth || 'moderate',
        learning: user.learning || 'text',
        engagement: user.engagement || 'moderate',
        goals: safetyData?.goals || [],
        experience: safetyData?.experience || 'beginner',
        timeCommitment: safetyData?.timePerDay || safetyData?.timeCommitment || '15min',
        safety: {
          crisisSupport: !!safetyData?.crisisSupport,
          contentWarnings: !!safetyData?.contentWarnings,
          skipTriggers: !!safetyData?.skipTriggers,
          topicsToAvoid: safetyData?.topicsToAvoid || [],
          triggerWords: safetyData?.triggerWords || ''
        }
      }

      const analyzer = new AIOnboardingAnalyzer({ allowFallback: false })
      const { analysis, questions } = await analyzer.analyzeOnboardingAndGenerateQuestions(onboardingData)

      // Convert AI format to legacy format for backward compatibility
      const legacyQuestions = questions.map((q, index) => ({
        id: index + 1,
        category: q.category,
        question: q.question,
        followUp: q.followUp,
        options: Array.isArray(q.options) ? q.options : [],
        adaptive: q.adaptive || {
          tone: [onboardingData.tone],
          rawness: [onboardingData.rawness],
          depth: [onboardingData.depth]
        },
        aiPrompt: q.aiPrompt || 'Analyze response for patterns and trauma-informed insights.'
      }))

      // Save the analysis and questions to the database
      const updatedSafety = {
        ...safetyData,
        diagnosticAnalysis: analysis,
        personalizedQuestions: legacyQuestions,
        questionGenerationTimestamp: new Date().toISOString()
      }

      await db.update(users)
        .set({ safety: updatedSafety })
        .where(eq(users.id, userId))

      console.log('Successfully saved personalized questions to database')
      isGeneratingQuestions = false

      return NextResponse.json({
        questions: legacyQuestions,
        hsi: { questions: HSI_QUESTIONS },
        userPreferences: {
          tone: user.tone || 'gentle',
          voice: user.voice || 'friend',
          rawness: user.rawness || 'moderate',
          depth: user.depth || 'moderate',
          learning: user.learning || 'text',
          engagement: user.engagement || 'moderate',
          goals: safetyData.goals || [],
          experience: safetyData.experience || 'beginner'
        },
        analysis,
        isPersonalized: true
      })
          } catch (generateError) {
        console.error('Failed to generate personalized questions:', generateError)
        isGeneratingQuestions = false
        return NextResponse.json(
          { 
            error: 'Failed to generate personalized questions. Please try again.',
            details: generateError instanceof Error ? generateError.message : 'Unknown error'
          },
          { status: 500 }
        )
      }

  } catch (error) {
    console.error('Error getting diagnostic questions:', error)
    return NextResponse.json(
      { error: 'Failed to get diagnostic questions' },
      { status: 500 }
    )
  }
}
